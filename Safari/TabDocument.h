/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "MobileSafari-Structs.h"
#import "WebUIBrowserLoadingControllerDelegate.h"
#import "StoreBannerDelegate.h"
#import "ReaderControllerDelegate.h"
#import <Foundation/NSObject.h>

@class WebUIBrowserLoadingController, WebDownload, NSURLRequest, StoreBanner, NSString, NSCountedSet, NSTimer, NSMutableSet, UIImage, UIColor, SecurityInfo, PageLoadStatistics, TabBarItem, QuickLookDocument, TabButton, CALayer, QuickLookDocumentController, NSURL, BrowserReaderView, NSDictionary, ReaderContext, UIWebBrowserView, NSMutableArray, UIWebPDFViewHandler;
@protocol TabDocumentDelegate;

__attribute__((visibility("hidden")))
@interface TabDocument : NSObject <ReaderControllerDelegate, WebUIBrowserLoadingControllerDelegate, StoreBannerDelegate> {
	int _retainCount;
	id<TabDocumentDelegate> _delegate;
	NSString* _uuid;
	UIWebBrowserView* _browserView;
	QuickLookDocumentController* _quickLookDocumentController;
	BOOL _quickLookDocumentCheckCompleted;
	UIWebPDFViewHandler* _pdfViewHandler;
	float _zoomScale;
	CALayer* _holdingLayer;
	TabButton* _tabButton;
	TabBarItem* _tabBarItem;
	WebUIBrowserLoadingController* _loadingController;
	NSURL* _responseURL;
	int _downloadingFileType;
	WebDownload* _fileDownload;
	NSString* _fileDownloadPath;
	QuickLookDocument* _quickLookDocument;
	NSString* _startURLString;
	NSURLRequest* _failedRequest;
	BOOL _reloadAfterResume;
	BOOL _reloadingFailedRequest;
	NSString* _EVOrganizationName;
	NSURL* _originatingURL;
	NSURL* _tabReuseURL;
	CGPoint _scrollPoint;
	BOOL _omittedFromTabExposeButtonCount;
	BOOL _isBlankDocument;
	BOOL _isPopup;
	int _thumbnailStatus;
	BOOL _autoUpdatesThumbnail;
	CGRect _screenShotFrame;
	BOOL _suspended;
	BOOL _hibernated;
	BOOL _allowURLAsTitle;
	BOOL _loadWasUserDriven;
	BOOL _watchingProgressForStall;
	NSTimer* _progressStalledTimer;
	BOOL _progressStalled;
	BOOL _progressCanStall;
	BOOL _waitingForImportantSubresources;
	long long _downloadBytesExpected;
	unsigned _downloadBytesLoaded;
	int _resourcesCurrentlyLoadingCount;
	NSCountedSet* _subresourceHostsCurrentlyLoading;
	NSMutableSet* _knownResponsiveSubresourceHosts;
	BOOL _isActive;
	BOOL _isPagePaused;
	BOOL _isClosed;
	UIColor* _bodyBackgroundColor;
	double _lastViewedTime;
	NSMutableArray* _alerts;
	NSDictionary* _backForwardListDictionary;
	PageLoadStatistics* _stats;
	BOOL _isWaitingForLastDraw;
	CFRunLoopObserverRef _mainRunLoopDrawObserver;
	struct {
		int version;
		void* info;
		/*function-pointer*/ void* retain;
		/*function-pointer*/ void* release;
		/*function-pointer*/ void* copyDescription;
	} _mainRunLoopDrawObserverContext;
	void* _internal;
	BOOL _showingSecurityWarningPage;
	BOOL _loadingSecurityWarningPage;
	SecurityInfo* _provisionalSecurityInfo;
	ReaderContext* _readerContext;
	BrowserReaderView* _browserReaderView;
	BOOL _hasDoneReaderAvailabilityDetection;
	NSTimer* _readerAvailabilityDetectionTimer;
	BOOL _keepReadingListBookmarkIDForNextCommit;
	unsigned _readingListBookmarkID;
	BOOL _userHasManipulatedVisibleRegion;
	BOOL _wasOpenedFromLink;
	BOOL _wasOpenedFromHistory;
	unsigned _downloadBackgroundTaskIdentifier;
	unsigned _resourceLoadBackgroundTaskIdentifier;
	double _pageLoadStartTime;
	double _firstVisualLayoutTime;
	double _pageLoadStopTime;
	double _lastLoadCommittedTime;
	BOOL _loadWasStartedByUserClick;
	BOOL _goingBackAfterQuickStop;
	BOOL _clearVisitedLinkStyleAfterQuickStop;
	BOOL _isShowingReader;
	BOOL _shouldRestoreReader;
	int _readerViewTopScrollOffset;
	int _externalAppRedirectState;
	NSDictionary* _initialArticleScrollDictionaryForCloudTab;
	BOOL _usesMinimalTiling;
	StoreBanner* _storeBanner;
	UIImage* siteCustomIcon;
	BOOL siteCustomIconPrecomposed;
	BOOL showingErrorPage;
}
@property(assign, nonatomic) BOOL showingErrorPage;
@property(assign, nonatomic) BOOL siteCustomIconPrecomposed;
@property(retain, nonatomic) UIImage* siteCustomIcon;
@property(assign, nonatomic) int externalAppRedirectState;
@property(assign, nonatomic) unsigned readingListBookmarkID;
@property(retain, nonatomic) StoreBanner* storeBanner;
@property(assign, nonatomic) BOOL usesMinimalTiling;
@property(assign, nonatomic) int readerViewTopScrollOffset;
@property(assign, nonatomic) BOOL shouldRestoreReader;
@property(assign, nonatomic) BOOL isShowingReader;
@property(readonly, assign, nonatomic) BrowserReaderView* browserReaderView;
@property(assign, nonatomic, getter=isOmittedFromTabExposeButtonCount) BOOL omittedFromTabExposeButtonCount;
@property(retain, nonatomic) QuickLookDocumentController* quickLookDocumentController;
@property(copy) NSURL* originatingURL;
@property(assign, nonatomic) BOOL wasOpenedFromLink;
@property(readonly, assign, nonatomic) CALayer* holdingLayer;
@property(retain, nonatomic) QuickLookDocument* quickLookDocument;
@property(retain, nonatomic) NSString* fileDownloadPath;
@property(retain, nonatomic) WebDownload* fileDownload;
-(id).cxx_construct;
-(void)shouldPinStoreBanner:(BOOL)banner;
-(void)dismissStoreBanner;
-(BOOL)supportsFindOnPage;
-(void)setClosed:(BOOL)closed;
-(BOOL)isClosed;
-(void)setUserHasManipulatedVisibleRegion:(BOOL)region;
-(void)setLastViewedTime:(double)time;
-(double)lastViewedTime;
-(void)finishSimulatedClick;
-(void)beginSimulatedClickForURL:(id)url;
-(BOOL)isSimulatingClick;
-(void)download:(id)download didFailWithError:(id)error;
-(void)downloadDidFinish:(id)download;
-(void)_showProfileInstallAlert;
-(void)download:(id)download didReceiveResponse:(id)response;
-(void)download:(id)download didReceiveDataOfLength:(unsigned)length;
-(void)download:(id)download decideDestinationWithSuggestedFilename:(id)suggestedFilename;
-(void)downloadDidBegin:(id)download;
-(void)_clearFileDownloadState;
-(BOOL)isImportantDocument;
-(void)endResourceLoadBackgroundTask;
-(void)beginResourceLoadBackgroundTask;
-(void)endDownloadBackgroundTask;
-(void)beginDownloadBackgroundTask:(id)task;
-(void)clearSearchEngineScriptObjects:(id)objects;
-(void)webView:(id)view didClearWindowObject:(id)object forFrame:(id)frame;
-(BOOL)webView:(id)view shouldChangeSelectedDOMRange:(id)range toDOMRange:(id)domrange affinity:(int)affinity stillSelecting:(BOOL)selecting;
-(void)webView:(id)view unableToImplementPolicyWithError:(id)error frame:(id)frame;
-(void)webView:(id)view decidePolicyForMIMEType:(id)mimetype request:(id)request frame:(id)frame decisionListener:(id)listener;
-(void)_showGenericDownloadAlert;
-(void)webView:(id)view decidePolicyForNewWindowAction:(id)newWindowAction request:(id)request newFrameName:(id)name decisionListener:(id)listener;
-(void)webView:(id)view decidePolicyForNavigationAction:(id)navigationAction request:(id)request frame:(id)frame decisionListener:(id)listener;
-(id)resultOfLoadingURL:(id)loadingURL;
-(id)resultOfLoadingRequest:(id)loadingRequest inFrame:(id)frame;
-(void)_decidePolicyForAction:(id)action request:(id)request frame:(id)frame newFrameName:(id)name decisionListener:(id)listener;
-(id)_readingListArchiveNextPageLinkForRequest:(id)request webFrame:(id)frame;
-(void)_redirectToExternalNavigationResult:(id)externalNavigationResult fromOriginalURL:(id)originalURL;
-(BOOL)_shouldPromptUserForExternalNavigationResult:(id)externalNavigationResult;
-(void)_queueAlertForRedirectToExternalNavigationResult:(id)externalNavigationResult fromOriginalURL:(id)originalURL;
-(void)_addInvalidURLAlert;
-(void)_addNoFeedAppSupportAlert;
-(BOOL)_shouldAskAboutInsecureFormSubmissionForAction:(id)action andURL:(id)url;
-(void)_didRedirectToAnotherApp:(id)anotherApp userCancelled:(BOOL)cancelled;
-(void)_ignorePolicyListener:(id)listener;
-(void)webView:(id)view resource:(id)resource didCancelAuthenticationChallenge:(id)challenge fromDataSource:(id)dataSource;
-(void)webView:(id)view resource:(id)resource didReceiveAuthenticationChallenge:(id)challenge fromDataSource:(id)dataSource;
-(BOOL)webView:(id)view resource:(id)resource canAuthenticateAgainstProtectionSpace:(id)space forDataSource:(id)dataSource;
-(id)webThreadWebView:(id)view resource:(id)resource willSendRequest:(id)request redirectResponse:(id)response fromDataSource:(id)dataSource;
-(id)webThreadWebView:(id)view identifierForInitialRequest:(id)initialRequest fromDataSource:(id)dataSource;
-(void)webThreadWebView:(id)view resource:(id)resource didFailLoadingWithError:(id)error fromDataSource:(id)dataSource;
-(void)webThreadWebView:(id)view resource:(id)resource didFinishLoadingFromDataSource:(id)dataSource;
-(void)_decrementCurrentlyLoadingResourceCount;
-(void)_incrementCurrentlyLoadingResourceCount;
-(void)webView:(id)view didChangeLocationWithinPageForFrame:(id)frame;
-(void)webView:(id)view didFailLoadWithError:(id)error forFrame:(id)frame;
-(void)webView:(id)view didFinishLoadForFrame:(id)frame;
-(double)lastPageLoadTime;
-(double)lastPageVisualLayoutTime;
-(void)_notifyPageLoadDidFinishIfNecessary;
-(void)webView:(id)view didFirstVisuallyNonEmptyLayoutInFrame:(id)frame;
-(void)webThreadWebViewDidLayout:(id)webThreadWebView;
-(void)showStoreBannerIfNecessary;
-(void)_watchProgressForStall;
-(void)_progressDidStall;
-(void)_webThreadUpdateProgressCanStall;
-(void)_resetProgressStalled;
-(void)_cancelProgressStalledTimer;
-(BOOL)progressStalled;
-(void)webView:(id)view didCommitLoadForFrame:(id)frame;
-(void)webView:(id)view didFailProvisionalLoadWithError:(id)error forFrame:(id)frame;
-(id)_webClip;
-(void)_createPageLoadStatistics;
-(void)restoreStateFromHistoryItem:(id)historyItem forWebView:(id)webView;
-(void)saveStateToHistoryItem:(id)historyItem forWebView:(id)webView;
-(void)updateViewHierarchyForDocumentViewNewLoad:(id)documentViewNewLoad;
-(void)updateViewHierarchyForDocumentViewLoadComplete:(id)documentViewLoadComplete;
-(void)updateViewHierarchyForFirstNonEmptyLayoutInFrame:(id)frame;
-(void)webViewDidDrawDocument;
-(void)_PPTCheckDidDraw;
-(void)_PPTDocumentFinishedLoadingNotification:(BOOL)notification;
-(void)_updatePageLoadStatistics;
-(void)webView:(id)view didReceiveServerRedirectForProvisionalLoadForFrame:(id)frame;
-(void)webView:(id)view didStartProvisionalLoadForFrame:(id)frame;
-(id)EVOrganizationName;
-(void)browserLoadingControllerDidUpdateSecurity:(id)browserLoadingController;
-(BOOL)isSecure;
-(int)securityLevel;
-(id)forwardListControllerWithLimit:(int)limit;
-(id)backListControllerWithLimit:(int)limit;
-(void)browserLoadingControllerDidUpdateBackForward:(id)browserLoadingController;
-(BOOL)canGoForward;
-(BOOL)canGoBack;
-(BOOL)currentPageLoadedFromReadingList;
-(BOOL)loadWasUserDriven;
-(void)clearBackForwardCache;
-(void)destroyAllPlugIns;
-(BOOL)pluginsAreRunning;
-(void)browserLoadingControllerWillStartUserDrivenLoad:(id)browserLoadingController;
-(void)reload;
-(void)goForward;
-(void)goBack;
-(void)stopLoading;
-(void)loadCloudTab:(id)tab;
-(void)loadUserTypedAddress:(id)address;
-(void)loadBookmarkURL:(id)url updatingReadingListBookmarkWithBookmarkID:(unsigned)bookmarkID;
-(void)loadURL:(id)url userDriven:(BOOL)driven;
-(void)loadWebClip:(id)clip userDriven:(BOOL)driven;
-(void)loadRequest:(id)request userDriven:(BOOL)driven;
-(void)browserLoadingController:(id)controller willLoadRequest:(id)request userDriven:(BOOL)driven;
-(BOOL)browserLoadingControllerShouldShowProvisionalURLs:(id)browserLoadingController;
-(id)titleForNewBookmark;
-(id)title;
-(BOOL)hasQuickLookContent;
-(BOOL)isPDFDocument;
-(BOOL)isLoading;
-(void)setLoading;
-(void)browserLoadingController:(id)controller didFinishLoadingWithError:(id)error dataSource:(id)source;
-(void)browserLoadingControllerDidStartLoading:(id)browserLoadingController;
-(void)_updateTabThumbnailForDoneLoading;
-(id)UUID;
-(void)setUUID:(id)uuid;
-(void)browserLoadingControllerDidUpdateURL:(id)browserLoadingController;
-(void)clearTabReuseURL;
-(void)setTabReuseURL:(id)url;
-(id)tabReuseURL;
-(id)URLForSharing;
-(id)URL;
-(void)_setResponseURL:(id)url;
-(id)browserLoadingController:(id)controller userVisibleStringForURL:(id)url;
-(void)browserLoadingControllerDidUpdateURLString:(id)browserLoadingController;
-(id)URLStringWithoutScheme;
-(id)URLString;
-(void)setScrollPoint:(CGPoint)point;
-(CGPoint)scrollPoint;
-(void)_progressChanged:(id)changed;
-(void)browserLoadingControllerDidUpdateEstimatedProgress:(id)browserLoadingController;
-(float)estimatedProgress;
-(void)updateBackgroundColor:(CGColorRef)color;
-(id)bodyBackgroundColor;
-(BOOL)isPopup;
-(void)setPopup:(BOOL)popup;
-(CGRect)screenShotFrame;
-(void)setScreenShotFrame:(CGRect)frame;
-(void)willClose;
-(void)_closeTabDocumentAnimated:(BOOL)animated;
-(void)setActive:(BOOL)active;
-(void)becameActive;
-(void)setDelegate:(id)delegate;
-(id)tabBarItem;
-(id)tabButton;
-(id)frontView;
-(void)setZoomScale:(float)scale;
-(float)zoomScale;
-(id)pdfHandler;
-(id)pdfView;
-(id)browserView;
-(int)thumbnailStatus;
-(BOOL)needsThumbnailUpdate;
-(void)setThumbnailNeedsRedrawForReader;
-(void)setSuspendedWhileActiveTab;
-(void)setNeedsNewThumbnail;
-(BOOL)isBlankDocument;
-(void)setBlankDocument:(BOOL)document;
-(void)_updateTilingArea;
-(id)cachedSnapshot;
-(void)setAutoUpdatesThumbnail:(BOOL)thumbnail;
-(BOOL)autoUpdatesThumbnail;
-(void)processUpdatedSnapshot:(id)snapshot animated:(BOOL)animated;
-(void)updateTabThumbnail;
-(void)updateTabThumbnailAnimated:(BOOL)animated synchronous:(BOOL)synchronous;
-(void)_saveBackForwardListToDictionary;
-(void)restoreBackForwardListFromDictionary;
-(void)_restoreTransientReadingListDataToWebHistoryItem:(id)webHistoryItem;
-(void)goToHistoryItem:(id)historyItem;
-(void)goToCurrentHistoryItem;
-(id)backForwardListDictionary;
-(void)setBackForwardListDictionary:(id)dictionary;
-(void)removeNonVisibleTiles;
-(void)setPagePaused:(BOOL)paused withEvents:(BOOL)events;
-(void)resume;
-(void)suspendForEventsOnly:(BOOL)eventsOnly;
-(BOOL)isHibernated;
-(void)unhibernate;
-(void)hibernate;
-(id)initWithTitle:(id)title URL:(id)url UUID:(id)uuid hibernated:(BOOL)hibernated readingListBookmarkID:(unsigned)anId;
-(void)_closeButtonPressed;
-(void)browserLoadingControllerDidUpdateTitle:(id)browserLoadingController;
-(void)_updateTabBarTitle;
-(id)tabBarTitle;
-(id)rawTitle;
-(id)_titleIncludeLoading:(BOOL)loading allowURLStringFallback:(BOOL)fallback;
-(void)dealloc;
-(void)_prepareWebViewRelease;
-(void)_createDocumentView;
-(BOOL)consoleMessagesEnabled;
-(void)didReadDefaults;
-(void)_updateTextSize;
-(BOOL)_isAnyTestRunning;
-(BOOL)_isDeallocating;
-(BOOL)_tryRetain;
-(unsigned)retainCount;
-(oneway void)release;
-(id)retain;
-(id)init;
-(void)reloadAfterError;
-(void)clearFailedRequest;
-(void)handlePolicyError:(id)error forFrame:(id)frame;
-(void)handleFrameLoadError:(id)error forDataSource:(id)dataSource;
-(id)_titleForError:(id)error;
-(void)_setFailedRequest:(id)request;
-(void)_reachabilityChanged:(id)changed;
-(BOOL)handleCertificateError:(id)error forDataSource:(id)dataSource;
-(void)showErrorPageWithTitle:(id)title bodyText:(id)text forError:(id)error;
-(void)addAlertWithTitle:(id)title bodyText:(id)text;
-(void)addFormAlertWithTitle:(id)title listener:(id)listener;
-(id)alert;
-(void)performAction:(int)action forAlert:(id)alert;
-(void)_continueWithoutCredentialsUsingAlertContext:(id)context;
-(void)_continueAfterCertificateAlertWithContext:(id)context;
-(void)_loadRequest:(id)request inFrame:(id)frame;
-(void)addAlert:(id)alert;
-(id)_genericMessageForError:(id)error dataSource:(id)source;
-(id)_specializedMessageForError:(id)error dataSource:(id)source;
-(id)_failingURLFromError:(id)error andDataSource:(id)source;
-(void)_fraudulentWebsiteCheckCompletedForURL:(id)url withAssessment:(int)assessment fromProvider:(int)provider;
-(void)checkForFraudulentWebsitesWithURL:(id)url;
-(void)cancelCheckForFraudulentWebsites;
-(void)_warnAboutUnsafeSiteWithSecurityInfo:(id)securityInfo;
-(void)setUpSecurityWarningPageController;
-(void)securityWarningPageClosePageButtonPressed;
-(void)securityWarningPageBackButtonPressed;
-(void)securityWarningPageIgnoreWarningButtonPressed;
-(void)securityWarningPageLoaded;
-(void)updateSecurityWarningPageWithSecurityInfo:(id)securityInfo;
-(void)hideSecurityWarningPage;
-(void)setLoadingSecurityWarningPage:(BOOL)page;
-(BOOL)loadingSecurityWarningPage;
-(BOOL)showingSecurityWarningPage;
-(void)showSecurityWarningPageWithSecurityInfo:(id)securityInfo;
-(void)commitProvisionalSecurityInfo;
-(void)setProvisionalSecurityInfo:(id)info;
-(id)provisionalSecurityInfo;
-(void)setUpSecurityWarningPage;
-(id)securityWarningPagePath;
-(void)_continueLoadingSite;
-(BOOL)safeBrowsingObserverIsValid;
-(void)invalidateSafeBrowsingObserver;
-(void)initializeSafeBrowsingObserver;
-(void)clearReaderScrollInformation;
-(void)updateReaderView;
-(void)willCloseReaderWebView:(id)view;
-(id)readerPageArchiveURL;
-(void)didClickLinkInReaderWithRequest:(id)request;
-(void)didChangeNextPageLoadingState:(BOOL)state;
-(void)didInitReaderJSController:(ReaderJSController*)controller;
-(void)didDeactivateReaderWithMode:(int)mode;
-(void)didActivateReader;
-(void)willActivateReader;
-(BOOL)networkIsReachable;
-(int)readerOperationMode;
-(BOOL)isShowingReadingListArchive;
-(BOOL)shouldShowReaderOnActive;
-(id)readerContext;
-(void)detectReaderAvailabilitySoon;
-(BOOL)isReaderAvailable;
-(BOOL)hasDoneReaderDetection;
-(void)clearReaderContext;
-(void)_clearBrowserReaderView;
-(void)createBrowserReaderViewIfNeeded;
-(void)_detectReaderAvailabilityNow;
-(void)_detectReaderAvailabilityOnWebThread;
-(void)_didDetectReaderAvailability:(BOOL)availability;
-(void)_cancelReaderAvailabilityDetectionTimer;
@end

